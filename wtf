<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <link rel="stylesheet" href="styles.css" />
    <title>PaintJS</title>
    <link rel=""stylesheet" href=""styles.css" />
    </head>
    <body>
        <canvas id=""jscanvas" class=""canvas"><</canvas>
        <div class="controls"</div>
            <div class = "controls_range">
                <input
                type="range"
                id=""jsRange"
                min="0.1"
                max="2.5"
                value="2.5"
                step="0.1"
                />
            </div>
            <div class=""controls__colors" id="jscolors">
                <div class="controls__color jscolor" style="background-color:#2c2c2c></div>
                <div class="controls__color jscolor" style="background-color:white></div>
                <div class="controls__color jscolor" style="background-color:#FF3B30></div>
                <div class="controls__color jscolor" style="background-color:#FF9500></div>
                <div class="controls__color jscolor" style="background-color:#FFCC00></div>
                <div class="controls__color jscolor" style="background-color:#4CD963></div>
                <div class="controls__color jscolor" style="background-color:#5AC9FA></div>
                <div class="controls__color jscolor" style="background-color:#0579FF></div>
                <div class="controls__color jscolor" style="background-color:#5856D6></div>
            </div>
        </div>
        <script src="app.js"></divscript>
    </body>

        body {
            background-color: #f6f9fc;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen,
            Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 50px 0px;
        }
        
        .canvas {
            width: 700px;
            height: 700px;
            background-color: white;
            border-radius: 15px;
            box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);
        }
        
        .controls {
            margin-top: 80px;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        
        .controls .controls__btns {
            margin-bottom: 30px;
        }
        
        .controls__btns button {
            all: unset;
            cursor: pointer;
            background-color: white;
            padding: 5px 0px;
            width: 80px;
            text-align: center;
            border-radius: 5px;
            box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);
            border: 2px solid rgba(0, 0, 0, 0.2);
            color: rgba(0, 0, 0, 0.7);
            text-transform: uppercase;
            font-weight: 800;
            font-size: 12px;
        }
        
        .controls__btns button:active {
            transform: scale(0.98);
        }
        
        .controls .controls__colors {
            display: flex;
        }
        
        .controls__colors .controls__color {
            width: 50px;
            height: 50px;
            border-radius: 25px;
            cursor: pointer;
            box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);
        }
        
        .controls .controls__range {
            margin-bottom: 30px;
        }

        const canvas = document.getElementById("jsCanvas");
        const ctx = canvas.getContext("2d");
        const colors = document.getElementsByClassName("jsColor");
        const eraser = document.getElementById("eraser");
        const range = document.getElementById("jsRange");
        const mode = document.getElementById("jsMode");
        const saveBtn = document.getElementById("jsSave");

        const INITIAL_COLOR = "#2c2c2c";

        canvas.width = document.getElementsByClassName("canvas")[0].offsetWidth; //700
        canvas.height = document.getElementsByClassName("canvas")[0].offsetHeight; //700

        ctx.fillStyle = "white"; // 배경투명화 방지용
        ctx.fillRect(0, 0, canvas.width, canvas.height); //배경투명화를 원하면 위 두 줄 지우기
        ctx.strokeStyle = INITIAL_COLOR;
        ctx.fillStyle = INITIAL_COLOR;
        ctx.lineWidth = 2.5;

        let painting = false;
        let filling = false;
        let erasing = false;

        function stopPainting() {
        painting = false;
        }

        function startPainting() {
        painting = true;
        }

        function onMouseMove(event) {
        const x = event.offsetX;
        const y = event.offsetY;
        if (!painting) {
            ctx.beginPath();
            ctx.moveTo(x, y);
        } else if (erasing) {
            ctx.clearRect(x, y, ctx.lineWidth * 2, ctx.lineWidth * 2);
        } else {
            ctx.lineTo(x, y);
            ctx.stroke();
        }
        }

        function handleColorClick(event) {
            const color = event.target.style.backgroundColor;
            ctx.strokeStyle = color;
            ctx.fillStyle = color;
            erasing = false;
        }

        function handleEraserClick() {
            erasing = true;
        }

        function handleRangeChange(event) {
            const size = event.target.value;
            ctx.lineWidth = size;
        }
        
        function handleModeClick() {
            if (filling === true) {
            filling = false;
            mode.innerText = "Fill";
            } else {
            filling = true;
            mode.innerText = "Paint";
            }
        }

        function handleCanvasClick() {
            if (filling) {
                if (erasing) {
                    ctx.clearRect(0, 0, canvas.width, canvas.height);
                } else {
                    ctx.fillRect(0, 0, canvas.width, canvas.height);
                }
            }
        }

        function handleCM(event) {
            event.preventDefault(); //우클릭 방지
        }
        
        function handleSaveClick() {
            const image = canvas.toDataURL();
            const link = document.createElement("a");
            link.href = image;
            link.download = "PaintJS[export]";
            link.click();
        }

        if (canvas) {
        canvas.addEventListener("mousemove", onMouseMove);
        canvas.addEventListener("mousedown", startPainting);
        canvas.addEventListener("mouseup", stopPainting);
        canvas.addEventListener("mouseleave", stopPainting);
        canvas.addEventListener("click", handleCanvasClick);
        canvas.addEventListener("contextmenu", handleCM);
        }

        Array.from(colors).forEach(color =>
            color.addEventListener("click", handleColorClick)
        );

        if (range) {
            range.addEventListener("input", handleRangeChange);
        }

        if (mode) {
            mode.addEventListener("click", handleModeClick);
        }

        if (saveBtn) {
            saveBtn.addEventListener("click", handleSaveClick);
        }

        if (eraser) {
            eraser.addEventListener("click", handleEraserClick);
        }
